#!/bin/bash
# Copyright (C) 2024 Evgeny Sinelnikov <sin@altlinux.org>
# Copyright (C) 2024 Andrey Limachko <liannnix@altlinux.org>
# Copyright (C) 2024 Elena Dyatlenko <lenka@altlinux.org>
#
# The Storage Disk Status Diagnostic Utility
#
# This program is free software: you can redistribute it and/or modify
#
# SPDX-License-Identifier: GNU GPL v3.0

set -euo pipefail

. shell-getopt

PROG_NAME="${0##*/}"
VERSION="0.0.1"
global_retval=0
task_list="$*"
cmd="run"
DISKS=""

print_version() {
	cat <<EOF
$PROG_NAME version $VERSION
EOF
	exit 0
}

show_usage() {
	cat <<EOF
$PROG_NAME - Storage disks diagnostic tool.

Usage: $PROG_NAME [options] [<diagnostic-task>]

Options:
	-l, --list			list of diagnostic tasks
	-V, --version		print program version and exit
	-h, --help			show this text and exit
EOF
	exit 0
}

TEMP=$(getopt -n "${0##*/}" -o "l,V,r,h", -l "list,version,report,help" -- "$@") || show_usage
eval set -- "$TEMP"

while :; do
	case "$1" in
		-l|--list)
			cmd="list"
			shift
			;;
		-V|--version)
			print_version
			shift
			;;
		-r|--report)
			shift
			;;
		-h|--help)
			show_usage
			shift
			;;
		--)
			shift
			break
			;;
		*)
			fatal "Unrecognized option: $1"
			;;
	esac
done

task_show() {
	local func="$1"
	echo "$func"
}

task_run() {
	local retval=126
	local func="$1"

	if test -n "$task_list"; then
		echo "$task_list" | tr ' ' '\n' | grep -q "^$func\$" || return 0
	fi

	$func && retval=0 || retval="$?"
	test $retval = 0 || global_retval=1

	return $retval
}

# Determining the test execution status
test_status() {
	local retval="$1"
	local task="$2"

	case "$retval" in
		0) echo "[DONE]: $task"
			;;
		1) echo "[FAIL]: $task"
			;;
		2) echo "[WARN]: $task"
			;;
		*) echo "[FAIL]: $task"
			;;
	esac
}

# Depending on the parameter of the cmd variable, the function decides what to run
task() {
	local task="$1"

	case "$cmd" in
		list)
			task_show "$task"
			;;
		report)
			;;
		run)
			if test -z "$task_list" || grep "$task" <<< "$task_list"; then
				local retval=0

				task_run "$task" || retval="$?"
				test_status "$retval" "$task"
			fi
			;;
		*)
			fatal "Unrecognized command: $cmd"
			;;
	esac
}

# Get a list of system disks
get_disks() {
	local retval=0
	DISKS=$(smartctl --scan | grep -E -o '/dev/[^[:space:],]+' | sort | uniq) || retval=1
	return "$retval"
}

# Verification whether this machine is virtual
is_vm() {
	local retval=0
	echo ================================
	hostnamectl | grep -i virtualization || retval=1
	if [ "$retval" -eq "0" ]; then
		echo This is a virtual machine.
	else
		echo This is not a virtual machine
	fi
	echo ================================
	return "$retval"
}

# Display a list of system disks
view_disks() {
	local retval=0
	echo ================================
	lsblk || retval=1
	echo ================================
	return "$retval"
}

# Display the disk type
view_disk_type() {
	local retval=0
	echo ================================
	smartctl --scan
	echo ================================
	return "$retval"
}

# Display disk information using the smartctl utility
view_adout_disk() {
	local retval=0
	echo ================================
	get_disks || retval=1
	for disk in $DISKS; do
		echo Disk: "$disk"
        smartctl -i "$disk" || retval=1
	done
	echo ================================
	return "$retval"
}

# Check SMART support
check_support_smart() {
	local retval=0
	echo ================================
	get_disks || retval=1
	for disk in $DISKS; do
		echo Disk: "$disk"
		local disk_info
		# Add a warning if SMART is supported but not enabled
		smartctl --info "$disk" | grep -E '(SMART support is:.*Enabled)' || retval=1
		[ "$retval" -eq "1" ] && echo S.M.A.R.T. is not supported on "$disk"
	done
	echo ================================
	return "$retval"
}

# Display detailed information about the disk status using the smartctl utility
view_about_disk_status() {
	local retval=0
	echo ================================
	get_disks || retval=1
	for disk in $DISKS; do
		echo Disk: "$disk"
		smartctl -A "$disk" || retval=1
	done
	echo ================================
	return "$retval"
}

# Display the result of the disk health check using the smartctl utility
view_disk_health() {
	local retval=0
	echo ================================
	get_disks || retval=1
	for disk in $DISKS; do
		echo Disk: "$disk"
		smartctl -H "$disk"| grep PASSED || retval=1
	done
	echo ================================
	return "$retval"
}

# Begin an extended self-test of disks (short)
short_test_smartctl() {
	local retval=0
	echo ================================
	get_disks || retval=1
	for disk in $DISKS; do
		echo Disk: "$disk"
		smartctl -t short "$disk" || retval=$?
		[ "$retval" -eq "4" ] && retval=2
	done
	echo ================================
	return "$retval"
}

# Display the Self Test Error Log
view_tests_smartctl() {
	local retval=0
	echo ================================
	get_disks || retval=1
	for disk in $DISKS; do
		echo Disk: "$disk"
		smartctl -l selftest "$disk" || retval=1
	done
	echo ================================
	return "$retval"
}

task is_vm
task view_disks
task view_disk_type
task view_adout_disk
task check_support_smart
task view_about_disk_status
task view_disk_health
task short_test_smartctl
task view_tests_smartctl

exit "$global_retval"
